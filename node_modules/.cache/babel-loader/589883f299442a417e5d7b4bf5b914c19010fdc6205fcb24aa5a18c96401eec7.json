{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Desktop/Weather/src/components/Data.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WeatherDataContext = /*#__PURE__*/createContext();\nconst Data = ({\n  children,\n  initialCity = 'London'\n}) => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [currentTemperature, setCurrentTemperature] = useState(null);\n  const [error, setError] = useState(null);\n  const [city, setCity] = useState(initialCity);\n  const [lastCity, setLastCity] = useState(null);\n  const fetchWeatherData = async cityName => {\n    if (lastCity === cityName && weatherData) {\n      return;\n    }\n    try {\n      var _forecastData$current;\n      // Geocode city name to latitude and longitude\n      const geoResponse = await fetch(`https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(cityName)}&count=1&format=json`);\n      const geoData = await geoResponse.json();\n      if (!geoData.results || geoData.results.length === 0) {\n        throw new Error('No location data found for ' + cityName);\n      }\n      const {\n        latitude,\n        longitude\n      } = geoData.results[0];\n\n      // Fetch weather forecast\n      const forecastResponse = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,wind_speed_10m,wind_direction_10m,uv_index&hourly=temperature_2m,precipitation,uv_index,wind_speed_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,uv_index_max,wind_speed_10m_max&forecast_days=10&timezone=auto&format=json`);\n      const forecastData = await forecastResponse.json();\n      setWeatherData(forecastData);\n      setCurrentTemperature(((_forecastData$current = forecastData.current) === null || _forecastData$current === void 0 ? void 0 : _forecastData$current.temperature_2m) || null);\n      setLastCity(cityName);\n      setError(null);\n    } catch (err) {\n      console.error('Fetch weather data error:', err.message);\n      setError(err.message || 'Failed to fetch weather data');\n      setWeatherData(null);\n      setCurrentTemperature(null);\n    }\n  };\n  useEffect(() => {\n    fetchWeatherData(city);\n  }, [city]);\n  return /*#__PURE__*/_jsxDEV(WeatherDataContext.Provider, {\n    value: {\n      weatherData,\n      currentTemperature,\n      error,\n      fetchWeatherData,\n      setCity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(Data, \"4Ts0tDeCQr5hxlXRL+b2ZbkvJzI=\");\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","WeatherDataContext","Data","children","initialCity","_s","weatherData","setWeatherData","currentTemperature","setCurrentTemperature","error","setError","city","setCity","lastCity","setLastCity","fetchWeatherData","cityName","_forecastData$current","geoResponse","fetch","encodeURIComponent","geoData","json","results","length","Error","latitude","longitude","forecastResponse","forecastData","current","temperature_2m","err","console","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kevin/Desktop/Weather/src/components/Data.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const WeatherDataContext = createContext();\n\nconst Data = ({ children, initialCity = 'London' }) => {\n  const [weatherData, setWeatherData] = useState(null);\n  const [currentTemperature, setCurrentTemperature] = useState(null);\n  const [error, setError] = useState(null);\n  const [city, setCity] = useState(initialCity);\n  const [lastCity, setLastCity] = useState(null);\n\n  const fetchWeatherData = async (cityName) => {\n    if (lastCity === cityName && weatherData) {\n      return;\n    }\n\n    try {\n      // Geocode city name to latitude and longitude\n      const geoResponse = await fetch(`https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(cityName)}&count=1&format=json`);\n      const geoData = await geoResponse.json();\n\n      if (!geoData.results || geoData.results.length === 0) {\n        throw new Error('No location data found for ' + cityName);\n      }\n      const { latitude, longitude } = geoData.results[0];\n\n      // Fetch weather forecast\n      const forecastResponse = await fetch(\n        `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,wind_speed_10m,wind_direction_10m,uv_index&hourly=temperature_2m,precipitation,uv_index,wind_speed_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,uv_index_max,wind_speed_10m_max&forecast_days=10&timezone=auto&format=json`\n      );\n      const forecastData = await forecastResponse.json();\n\n      setWeatherData(forecastData);\n      setCurrentTemperature(forecastData.current?.temperature_2m || null);\n      setLastCity(cityName);\n      setError(null);\n    } catch (err) {\n      console.error('Fetch weather data error:', err.message);\n      setError(err.message || 'Failed to fetch weather data');\n      setWeatherData(null);\n      setCurrentTemperature(null);\n    }\n  };\n\n  useEffect(() => {\n    fetchWeatherData(city);\n  }, [city]);\n\n  return (\n    <WeatherDataContext.Provider value={{ weatherData, currentTemperature, error, fetchWeatherData, setCity }}>\n      {children}\n    </WeatherDataContext.Provider>\n  );\n};\n\nexport default Data;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,kBAAkB,gBAAGL,aAAa,CAAC,CAAC;AAEjD,MAAMM,IAAI,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,WAAW,GAAG;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACW,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAACO,WAAW,CAAC;EAC7C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMmB,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;IAC3C,IAAIH,QAAQ,KAAKG,QAAQ,IAAIX,WAAW,EAAE;MACxC;IACF;IAEA,IAAI;MAAA,IAAAY,qBAAA;MACF;MACA,MAAMC,WAAW,GAAG,MAAMC,KAAK,CAAC,uDAAuDC,kBAAkB,CAACJ,QAAQ,CAAC,sBAAsB,CAAC;MAC1I,MAAMK,OAAO,GAAG,MAAMH,WAAW,CAACI,IAAI,CAAC,CAAC;MAExC,IAAI,CAACD,OAAO,CAACE,OAAO,IAAIF,OAAO,CAACE,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;QACpD,MAAM,IAAIC,KAAK,CAAC,6BAA6B,GAAGT,QAAQ,CAAC;MAC3D;MACA,MAAM;QAAEU,QAAQ;QAAEC;MAAU,CAAC,GAAGN,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC;;MAElD;MACA,MAAMK,gBAAgB,GAAG,MAAMT,KAAK,CAClC,mDAAmDO,QAAQ,cAAcC,SAAS,oQACpF,CAAC;MACD,MAAME,YAAY,GAAG,MAAMD,gBAAgB,CAACN,IAAI,CAAC,CAAC;MAElDhB,cAAc,CAACuB,YAAY,CAAC;MAC5BrB,qBAAqB,CAAC,EAAAS,qBAAA,GAAAY,YAAY,CAACC,OAAO,cAAAb,qBAAA,uBAApBA,qBAAA,CAAsBc,cAAc,KAAI,IAAI,CAAC;MACnEjB,WAAW,CAACE,QAAQ,CAAC;MACrBN,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOsB,GAAG,EAAE;MACZC,OAAO,CAACxB,KAAK,CAAC,2BAA2B,EAAEuB,GAAG,CAACE,OAAO,CAAC;MACvDxB,QAAQ,CAACsB,GAAG,CAACE,OAAO,IAAI,8BAA8B,CAAC;MACvD5B,cAAc,CAAC,IAAI,CAAC;MACpBE,qBAAqB,CAAC,IAAI,CAAC;IAC7B;EACF,CAAC;EAEDX,SAAS,CAAC,MAAM;IACdkB,gBAAgB,CAACJ,IAAI,CAAC;EACxB,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,oBACEZ,OAAA,CAACC,kBAAkB,CAACmC,QAAQ;IAACC,KAAK,EAAE;MAAE/B,WAAW;MAAEE,kBAAkB;MAAEE,KAAK;MAAEM,gBAAgB;MAAEH;IAAQ,CAAE;IAAAV,QAAA,EACvGA;EAAQ;IAAAmC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACkB,CAAC;AAElC,CAAC;AAACpC,EAAA,CAjDIH,IAAI;AAAAwC,EAAA,GAAJxC,IAAI;AAmDV,eAAeA,IAAI;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}