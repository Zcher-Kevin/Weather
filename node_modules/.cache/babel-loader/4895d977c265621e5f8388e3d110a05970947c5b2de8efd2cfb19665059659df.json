{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Desktop/Weather/src/components/Data.js\",\n  _s = $RefreshSig$();\n// Description:\n// Main usage: This component fetches and stores the data from the API.\n// further description will be added later.\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { fetchWeatherApi } from 'openmeteo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WeatherDataContext = /*#__PURE__*/createContext();\nconst Data = ({\n  children,\n  initalCity = 'London'\n}) => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [currentTemperature, setCurrentTemperature] = useState(null);\n  const [error, setError] = useState(null);\n  const [city, setCity] = useState(initalCity);\n  const [lastCity, setLastCity] = useState(null);\n  const fetchWeatherData = async cityName => {\n    if (lastCity === cityName && weatherData) {\n      return;\n    }\n    try {\n      var _data$current;\n      // Geocode city name to latitude and longitude \n      // (using the searching function provided by the API)\n      const geoResponse = await fetchWeatherApi('https://geocoding-api.open-meteo.com/v1/search', {\n        query: cityName,\n        limit: 1\n      });\n      const {\n        latitude,\n        longitude\n      } = geoResponse[0] || {\n        latitude: 51.5074,\n        longitude: -0.1278 // Default to London if no results\n      };\n      const params = {\n        latitude,\n        longitude,\n        current: 'temperature_2m, wind_speed_10m, wind_direction_10m, uv_index',\n        hourly: 'temperature_2m, precipitation, uv_index, wind_speed_10m',\n        daily: 'weather_code, temperature_2m_max, temperature_2m_min, uv_index_max, wind_speed_10m_max',\n        forecast_days: 10,\n        timezone: 'auto'\n      };\n      const response = await fetchWeatherApi('https://api.open-meteo.com/v1/forecast', params);\n      const data = response[0];\n      setWeatherData(data);\n      setCurrentTemperature(((_data$current = data.current) === null || _data$current === void 0 ? void 0 : _data$current.temperature_2m) || null);\n      setLastCity(cityName);\n      setError(null);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch weather data');\n      setWeatherData(null);\n      setCurrentTemperature(null);\n    }\n  };\n  useEffect(() => {\n    fetchWeatherData(city);\n  }, [city]);\n  return /*#__PURE__*/_jsxDEV(WeatherDataContext.Provider, {\n    value: {\n      weatherData,\n      currentTemperature,\n      error,\n      fetchWeatherData,\n      setCity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(Data, \"nqtEms59Ehp5ZEHQMmDk/zKihAI=\");\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","createContext","useState","useEffect","fetchWeatherApi","jsxDEV","_jsxDEV","WeatherDataContext","Data","children","initalCity","_s","weatherData","setWeatherData","currentTemperature","setCurrentTemperature","error","setError","city","setCity","lastCity","setLastCity","fetchWeatherData","cityName","_data$current","geoResponse","query","limit","latitude","longitude","params","current","hourly","daily","forecast_days","timezone","response","data","temperature_2m","err","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kevin/Desktop/Weather/src/components/Data.js"],"sourcesContent":["// Description:\n// Main usage: This component fetches and stores the data from the API.\n// further description will be added later.\n\nimport React, {createContext, useState, useEffect} from 'react';\nimport { fetchWeatherApi} from 'openmeteo';\n\nexport const WeatherDataContext = createContext();\n\nconst Data = ({ children, initalCity = 'London' }) => {\n    const [weatherData, setWeatherData] = useState(null);\n    const [currentTemperature, setCurrentTemperature] = useState(null);\n    const [error, setError] = useState(null);\n    const [city, setCity] = useState(initalCity);\n    const [lastCity, setLastCity] = useState(null);\n\n    const fetchWeatherData = async (cityName) => {\n        if ( lastCity === cityName && weatherData) {\n            return;\n        }\n\n        try {\n        // Geocode city name to latitude and longitude \n        // (using the searching function provided by the API)\n        const geoResponse = await fetchWeatherApi('https://geocoding-api.open-meteo.com/v1/search', {\n            query: cityName,\n            limit: 1\n        });\n        const {latitude, longitude} = geoResponse[0] || {\n            latitude: 51.5074, longitude: -0.1278 // Default to London if no results\n        };\n\n        const params = {\n            latitude,\n            longitude,\n            current: 'temperature_2m, wind_speed_10m, wind_direction_10m, uv_index',\n            hourly: 'temperature_2m, precipitation, uv_index, wind_speed_10m',\n            daily: 'weather_code, temperature_2m_max, temperature_2m_min, uv_index_max, wind_speed_10m_max',\n            forecast_days: 10,\n            timezone: 'auto',\n        };\n\n        const response = await fetchWeatherApi('https://api.open-meteo.com/v1/forecast', params);\n        const data = response[0];\n\n        setWeatherData(data);\n        setCurrentTemperature(data.current?.temperature_2m || null);\n        setLastCity(cityName);\n        setError(null);\n    } catch (err) {\n        setError(err.message || 'Failed to fetch weather data');\n        setWeatherData(null);\n        setCurrentTemperature(null);\n        }\n    }\n    \n    useEffect(() => {\n        fetchWeatherData(city);\n    }, [city]);\n\n    return (\n        <WeatherDataContext.Provider value={{ weatherData, currentTemperature, error, fetchWeatherData, setCity }}>\n            {children}\n        </WeatherDataContext.Provider>\n    );\n}\n\nexport default Data;"],"mappings":";;AAAA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAGC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAC/D,SAASC,eAAe,QAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,OAAO,MAAMC,kBAAkB,gBAAGN,aAAa,CAAC,CAAC;AAEjD,MAAMO,IAAI,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU,GAAG;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACY,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACgB,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAACQ,UAAU,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMoB,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;IACzC,IAAKH,QAAQ,KAAKG,QAAQ,IAAIX,WAAW,EAAE;MACvC;IACJ;IAEA,IAAI;MAAA,IAAAY,aAAA;MACJ;MACA;MACA,MAAMC,WAAW,GAAG,MAAMrB,eAAe,CAAC,gDAAgD,EAAE;QACxFsB,KAAK,EAAEH,QAAQ;QACfI,KAAK,EAAE;MACX,CAAC,CAAC;MACF,MAAM;QAACC,QAAQ;QAAEC;MAAS,CAAC,GAAGJ,WAAW,CAAC,CAAC,CAAC,IAAI;QAC5CG,QAAQ,EAAE,OAAO;QAAEC,SAAS,EAAE,CAAC,MAAM,CAAC;MAC1C,CAAC;MAED,MAAMC,MAAM,GAAG;QACXF,QAAQ;QACRC,SAAS;QACTE,OAAO,EAAE,8DAA8D;QACvEC,MAAM,EAAE,yDAAyD;QACjEC,KAAK,EAAE,wFAAwF;QAC/FC,aAAa,EAAE,EAAE;QACjBC,QAAQ,EAAE;MACd,CAAC;MAED,MAAMC,QAAQ,GAAG,MAAMhC,eAAe,CAAC,wCAAwC,EAAE0B,MAAM,CAAC;MACxF,MAAMO,IAAI,GAAGD,QAAQ,CAAC,CAAC,CAAC;MAExBvB,cAAc,CAACwB,IAAI,CAAC;MACpBtB,qBAAqB,CAAC,EAAAS,aAAA,GAAAa,IAAI,CAACN,OAAO,cAAAP,aAAA,uBAAZA,aAAA,CAAcc,cAAc,KAAI,IAAI,CAAC;MAC3DjB,WAAW,CAACE,QAAQ,CAAC;MACrBN,QAAQ,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOsB,GAAG,EAAE;MACVtB,QAAQ,CAACsB,GAAG,CAACC,OAAO,IAAI,8BAA8B,CAAC;MACvD3B,cAAc,CAAC,IAAI,CAAC;MACpBE,qBAAqB,CAAC,IAAI,CAAC;IAC3B;EACJ,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACZmB,gBAAgB,CAACJ,IAAI,CAAC;EAC1B,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,oBACIZ,OAAA,CAACC,kBAAkB,CAACkC,QAAQ;IAACC,KAAK,EAAE;MAAE9B,WAAW;MAAEE,kBAAkB;MAAEE,KAAK;MAAEM,gBAAgB;MAAEH;IAAQ,CAAE;IAAAV,QAAA,EACrGA;EAAQ;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEtC,CAAC;AAAAnC,EAAA,CAxDKH,IAAI;AAAAuC,EAAA,GAAJvC,IAAI;AA0DV,eAAeA,IAAI;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}