{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Desktop/Weather/src/components/Data.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { fetchWeatherApi } from 'openmeteo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WeatherDataContext = /*#__PURE__*/createContext();\nconst Data = ({\n  children,\n  initialCity = 'London'\n}) => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [currentTemperature, setCurrentTemperature] = useState(null);\n  const [error, setError] = useState(null);\n  const [city, setCity] = useState(initialCity);\n  const [lastCity, setLastCity] = useState(null);\n  const fetchWeatherData = async cityName => {\n    if (lastCity === cityName && weatherData) {\n      return;\n    }\n    try {\n      var _data$current;\n      // Geocode city name to latitude and longitude\n      const geoParams = {\n        name: cityName,\n        count: 1,\n        format: 'protobuf' // Explicitly request Protobuf\n      };\n      const geoResponse = await fetchWeatherApi('https://geocoding-api.open-meteo.com/v1/search', geoParams);\n      if (!geoResponse || !geoResponse.results || geoResponse.results.length === 0) {\n        throw new Error('No location data found for ' + cityName);\n      }\n      const {\n        latitude,\n        longitude\n      } = geoResponse.results[0] || {\n        latitude: 51.5074,\n        longitude: -0.1278 // Default to London\n      };\n      const forecastParams = {\n        latitude,\n        longitude,\n        current: 'temperature_2m, wind_speed_10m, wind_direction_10m, uv_index',\n        hourly: 'temperature_2m, precipitation, uv_index, wind_speed_10m',\n        daily: 'weather_code, temperature_2m_max, temperature_2m_min, uv_index_max, wind_speed_10m_max',\n        forecast_days: 10,\n        timezone: 'auto',\n        format: 'protobuf' // Explicitly request Protobuf\n      };\n      const response = await fetchWeatherApi('https://api.open-meteo.com/v1/forecast', forecastParams);\n      const data = response[0];\n      setWeatherData(data);\n      setCurrentTemperature(((_data$current = data.current) === null || _data$current === void 0 ? void 0 : _data$current.temperature_2m) || null);\n      setLastCity(cityName);\n      setError(null);\n    } catch (err) {\n      console.error('Fetch weather data error:', err.message);\n      // Fallback to JSON if Protobuf fails\n      try {\n        var _jsonData$current;\n        const jsonParams = {\n          ...forecastParams,\n          format: 'json'\n        };\n        const jsonResponse = await fetchWeatherApi('https://api.open-meteo.com/v1/forecast', jsonParams);\n        const jsonData = jsonResponse[0];\n        setWeatherData(jsonData);\n        setCurrentTemperature(((_jsonData$current = jsonData.current) === null || _jsonData$current === void 0 ? void 0 : _jsonData$current.temperature_2m) || null);\n        setLastCity(cityName);\n        setError(null);\n      } catch (jsonErr) {\n        console.error('JSON fallback error:', jsonErr.message);\n        setError('Failed to fetch weather data (Protobuf and JSON failed)');\n        setWeatherData(null);\n        setCurrentTemperature(null);\n      }\n    }\n  };\n  useEffect(() => {\n    fetchWeatherData(city);\n  }, [city]);\n  return /*#__PURE__*/_jsxDEV(WeatherDataContext.Provider, {\n    value: {\n      weatherData,\n      currentTemperature,\n      error,\n      fetchWeatherData,\n      setCity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Data, \"4Ts0tDeCQr5hxlXRL+b2ZbkvJzI=\");\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","createContext","useState","useEffect","fetchWeatherApi","jsxDEV","_jsxDEV","WeatherDataContext","Data","children","initialCity","_s","weatherData","setWeatherData","currentTemperature","setCurrentTemperature","error","setError","city","setCity","lastCity","setLastCity","fetchWeatherData","cityName","_data$current","geoParams","name","count","format","geoResponse","results","length","Error","latitude","longitude","forecastParams","current","hourly","daily","forecast_days","timezone","response","data","temperature_2m","err","console","message","_jsonData$current","jsonParams","jsonResponse","jsonData","jsonErr","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kevin/Desktop/Weather/src/components/Data.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { fetchWeatherApi } from 'openmeteo';\n\nexport const WeatherDataContext = createContext();\n\nconst Data = ({ children, initialCity = 'London' }) => {\n  const [weatherData, setWeatherData] = useState(null);\n  const [currentTemperature, setCurrentTemperature] = useState(null);\n  const [error, setError] = useState(null);\n  const [city, setCity] = useState(initialCity);\n  const [lastCity, setLastCity] = useState(null);\n\n  const fetchWeatherData = async (cityName) => {\n    if (lastCity === cityName && weatherData) {\n      return;\n    }\n\n    try {\n      // Geocode city name to latitude and longitude\n      const geoParams = {\n        name: cityName,\n        count: 1,\n        format: 'protobuf', // Explicitly request Protobuf\n      };\n      const geoResponse = await fetchWeatherApi('https://geocoding-api.open-meteo.com/v1/search', geoParams);\n      \n      if (!geoResponse || !geoResponse.results || geoResponse.results.length === 0) {\n        throw new Error('No location data found for ' + cityName);\n      }\n      const { latitude, longitude } = geoResponse.results[0] || {\n        latitude: 51.5074,\n        longitude: -0.1278, // Default to London\n      };\n\n      const forecastParams = {\n        latitude,\n        longitude,\n        current: 'temperature_2m, wind_speed_10m, wind_direction_10m, uv_index',\n        hourly: 'temperature_2m, precipitation, uv_index, wind_speed_10m',\n        daily: 'weather_code, temperature_2m_max, temperature_2m_min, uv_index_max, wind_speed_10m_max',\n        forecast_days: 10,\n        timezone: 'auto',\n        format: 'protobuf', // Explicitly request Protobuf\n      };\n\n      const response = await fetchWeatherApi('https://api.open-meteo.com/v1/forecast', forecastParams);\n      const data = response[0];\n\n      setWeatherData(data);\n      setCurrentTemperature(data.current?.temperature_2m || null);\n      setLastCity(cityName);\n      setError(null);\n    } catch (err) {\n      console.error('Fetch weather data error:', err.message);\n      // Fallback to JSON if Protobuf fails\n      try {\n        const jsonParams = { ...forecastParams, format: 'json' };\n        const jsonResponse = await fetchWeatherApi('https://api.open-meteo.com/v1/forecast', jsonParams);\n        const jsonData = jsonResponse[0];\n        setWeatherData(jsonData);\n        setCurrentTemperature(jsonData.current?.temperature_2m || null);\n        setLastCity(cityName);\n        setError(null);\n      } catch (jsonErr) {\n        console.error('JSON fallback error:', jsonErr.message);\n        setError('Failed to fetch weather data (Protobuf and JSON failed)');\n        setWeatherData(null);\n        setCurrentTemperature(null);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchWeatherData(city);\n  }, [city]);\n\n  return (\n    <WeatherDataContext.Provider value={{ weatherData, currentTemperature, error, fetchWeatherData, setCity }}>\n      {children}\n    </WeatherDataContext.Provider>\n  );\n};\n\nexport default Data;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}